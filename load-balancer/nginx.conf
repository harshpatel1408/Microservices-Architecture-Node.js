events {
    worker_connections 1024;
}

http {
    # rate limit: 1MB data storage, 10 requests per second
    limit_req_zone $binary_remote_addr zone=mylimit:1m rate=10r/s;

    # Grouping Authentication services
    upstream auth_services {
        least_conn; 
        server auth-service:3001; # Docker compose will be creating multiple auth-service containers and internal DNS will resolve `auth-service` to one of the running containers.
        
    }

    # Grouping Data services
    upstream data_services {
        least_conn;
        server data-service:3002;

    }

    server {
        listen 80;

        # Health check for the server itself
        location /nginx_health {
            return 200 "Healthy\n";
        }

        # Auth Service
        location /auth/ {
            proxy_pass http://auth_services/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            limit_req zone=mylimit burst=20 nodelay;
        }

        # Data Service
        location /api/ {
            proxy_pass http://data_services/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            limit_req zone=mylimit burst=20 nodelay;
        }

        # Socket.IO
        location /socket.io/ {
            proxy_pass http://data_services;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }
}
